import 'package:flutter/material.dart';

void main() {
  runApp(WildTicTacToe());
}

class WildTicTacToe extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Wild Tic Tac Toe',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: GamePage(),
    );
  }
}

class GamePage extends StatefulWidget {
  @override
  _GamePageState createState() => _GamePageState();
}

class _GamePageState extends State<GamePage> {
  List<String?> board = List.filled(9, null);
  String? winner;
  String player1Symbol = 'X'; 
  String player2Symbol = 'O'; 
  bool isPlayer1Turn = true;

  void _makeMove(int index) {
    if (board[index] == null && winner == null) {
      setState(() {
        board[index] = isPlayer1Turn ? player1Symbol : player2Symbol;
        _checkWinner();
        if (winner == null) {
          isPlayer1Turn = !isPlayer1Turn; 
        }
      });
    }
  }

  void _checkWinner() {
    const winningCombinations = [
      [0, 1, 2],
      [3, 4, 5],
      [6, 7, 8],
      [0, 3, 6],
      [1, 4, 7],
      [2, 5, 8],
      [0, 4, 8],
      [2, 4, 6],
    ];

    for (var combination in winningCombinations) {
      if (board[combination[0]] != null &&
          board[combination[0]] == board[combination[1]] &&
          board[combination[1]] == board[combination[2]]) {
        setState(() {
          winner = board[combination[0]];
        });
        return;
      }
    }
  }

  void _resetGame() {
    setState(() {
      board = List.filled(9, null);
      winner = null;
      isPlayer1Turn = true; 
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Wild Tic Tac Toe'),
      ),
      body: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Text(
            'Current move: ${isPlayer1Turn ? 'Player 1' : 'Player 2'}',
            style: TextStyle(fontSize: 20),
          ),
          SizedBox(height: 20),
          Row(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              DropdownButton<String>(
                value: player1Symbol,
                items: <String>['X', 'O'].map<DropdownMenuItem<String>>((String value) {
                  return DropdownMenuItem<String>(
                    value: value,
                    child: Text(value),
                  );
                }).toList(),
                onChanged: (String? newValue) {
                  setState(() {
                    player1Symbol = newValue!;
                    player2Symbol = newValue == 'X' ? 'O' : 'X'; 
                  });
                },
              ),
              SizedBox(width: 20),
              Text('Player 1'),
            ],
          ),
          Row(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              DropdownButton<String>(
                value: player2Symbol,
                items: <String>['X', 'O'].map<DropdownMenuItem<String>>((String value) {
                  return DropdownMenuItem<String>(
                    value: value,
                    child: Text(value),
                  );
                }).toList(),
                onChanged: (String? newValue) {
                  setState(() {
                    player2Symbol = newValue!;
                    player1Symbol = newValue == 'X' ? 'O' : 'X'; 
                  });
                },
              ),
              SizedBox(width: 20),
              Text('Player 2'),
            ],
          ),
          SizedBox(height: 20),
          Container(
            width: 300, 
            height: 300, 
            child: GridView.builder(
              itemCount: 9,
              gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
                crossAxisCount: 3,
                childAspectRatio: 1,
              ),
              shrinkWrap: true,
              itemBuilder: (context, index) {
                return GestureDetector(
                  onTap: () => _makeMove(index),
                  child: Container(
                    alignment: Alignment.center,
                    decoration: BoxDecoration(
                      border: Border.all(),
                      color: Colors.grey[200],
                    ),
                    child: Text(
                      board[index] ?? '',
                      style: TextStyle(fontSize: 48), 
                    ),
                  ),
                );
              },
            ),
          ),
          SizedBox(height: 20),
          if (winner != null)
            Text(
              'Game over! Won: ${winner == player1Symbol ? 'Player 1' : 'Player 2'}',
              style: TextStyle(fontSize: 24, color: Colors.red),
            ),
          SizedBox(height: 20),
          ElevatedButton(
            onPressed: _resetGame,
            child: Text('Start over'),
          ),
        ],
      ),
    );
  }
}
